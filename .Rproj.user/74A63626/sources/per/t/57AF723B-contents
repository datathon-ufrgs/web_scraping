---
title: "Web Scraping, Web Services e API's"
subtitle: "Extraindo dados através do R"
author: "<br><br> Lucas da Cunha Godoy"
date: "<br>2018/10/16"
output:
  xaringan::moon_reader:
    lib_dir: libs
    css: ["shinobi", "ninjutsu", "assets/ninpo.css"]
    self_contained: false
    nature:
      ratio: "16:9"
      highlightStyle: github
      highlightLines: true
      countIncrementalSlides: false
      seal: false
---

```{r setup, include=FALSE}
options(htmltools.dir.version = FALSE)
library(magrittr)
```

class: middle center bg-main1

# **1º Datathon - UFRGS **

--

<br>
# Web Scraping, Web Services e API's  
# `r icon::fa_robot()`

--

<img src="images/img1.jpg" width="40%">

---

class: bg-main1 split-30 hide-slide-number

.column.bg-main3[
]
.column.slide-in-right[
.sliderbox.bg-main2.vmiddle[
.font5[Definições]
]]

---

class: split-two

.column.bg-main1[
.split-three[
.row.bg-main1[.content.vmiddle.center[
## Web Scraping
]]
.row.bg-main2[.content.vmiddle.center[
## Web Service
]]
.row.bg-main3[.content.vmiddle.center[
## API
]]
]]


.column.bg-black.indigo[.content.vmiddle.center[
### Definição
<br>

### Pacotes
<br>

### Quando utilizar
<br>

]]

---

class: split-two gray-row3-col1 gray-row2-col1
count: false

.column.bg-main1[
.split-three[
.row.bg-main1[.content.vmiddle.center[
## Web Scraping
]]
.row.bg-main2[.content.vmiddle.center[
## Web Service
]]
.row.bg-main3[.content.vmiddle.center[
## API
]]
]]


.column.bg-black.indigo[.content.vmiddle[

### Definição

- Extração de dados de páginas web

- HTTP ou Navegador Web

- Pode ser feito automaticamente. Contudo, tipicamente, consiste em alguma 
automatização para extrair um volume de dados que seria muito demorado de
ser extraído manualmente.

### Pacotes

- `RSelenium`

- `rvest`

### Quando utilizar

- Dados não estruturados

- Dados não divulgados via API e Web Service

- SINAM, Wikipédia, etc.

]]


---

class: split-two gray-row3-col1 gray-row1-col1
count: false

.column.bg-main1[
.split-three[
.row.bg-main1[.content.vmiddle.center[
## Web Scraping
]]
.row.bg-main2[.content.vmiddle.center[
## Web Service
]]
.row.bg-main3[.content.vmiddle.center[
## API
]]
]]


.column.bg-black.indigo[.content.vmiddle[

### Definição

- Bases de dados disponíveis na web

- URL's parametrizadas

### Pacotes

- Não necessariamente necessita de um pacote específico.
Entretanto, `jsonlite` pode ajudar caso os dados sejam
retornados em forma de json.

### Quando utilizar

- Bases públicas nas quais as URLs seguem padrões
de acordo com os parâmetros solicitados.

- Exemplos:
* Portal da Transparência;
* IBGE

]]


---

class: split-two gray-row1-col1 gray-row2-col1
count: false

.column.bg-main1[
.split-three[
.row.bg-main1[.content.vmiddle.center[
## Web Scraping
]]
.row.bg-main2[.content.vmiddle.center[
## Web Service
]]
.row.bg-main3[.content.vmiddle.center[
## API
]]
]]


.column.bg-black.indigo[.content.vmiddle[
### Definição

- Application Programming Interface

- Muito parecido com web service

- Melhor documentado

### Pacotes

- Assim como web services, APIs não precisam de um
pacote específico. Contudo, recomenda-se utilização
do pacote `jsonlite`

- `rtweet` 

### Quando utilizar

- Sempre que disponível.

]]


---

class: split-three

.row.bg-main1[.content.vmiddle.center[
# API
]]

.row.bg-main2[.content.vmiddle.center[
# Web Service
]]

.row.bg-main3[.content.vmiddle.center[
# Web Scrapping
]]

---

class: bg-main1 split-30 hide-slide-number

.column.bg-main4[
]
.column.slide-in-right[
.sliderbox.bg-main3.vmiddle[
.font5[Exemplos]
]]

---

class: bg-main1 split-30 hide-slide-number center middle

`r icon::fa_globe(size = 3)`
# Web Scraping

---

class: bg-main1

## Utilizando o pacote `RSelenium`

```{r rsel_example, echo = T, eval = F}
require(RSelenium)

cDr <- wdman::chrome(port = 4444L, verbose = F)
remDr <- remoteDriver(browserName = "chrome", port = 4444L)

#---- IDH - Wikipedia ----

# Abre o navegador

remDr$open()

remDr$navigate("https://pt.wikipedia.org/wiki/Lista_de_munic%C3%ADpios_do_Brasil_por_IDH")

tabela_idh <- remDr$findElement(using = 'css selector', 
                                value = '#mw-content-text > div > table.wikitable.sortable.jquery-tablesorter')

(tabela_idh <- tabela_idh$getElementAttribute(attrName = 'outerHTML'))

(tabela_idh <- XML::htmlTreeParse(tabela_idh[[1]], useInternalNodes = T, 
                                  encoding = "UTF-8"))

(tabela_idh <- XML::readHTMLTable(doc = tabela_idh, header = T, 
                                  which = 1, as.data.frame = T))
```

---

class: bg-main1

## Utilizando o pacote `rvest`

```{r rvest_example, echo = T, eval = F}
require(rvest)

html <- read_html(x = "https://pt.wikipedia.org/wiki/Lista_de_munic%C3%ADpios_do_Brasil_por_IDH", 
                  encoding = "UTF-8")

tabela <- html %>%
  html_nodes(x = ., 
             xpath = '//*[@id="mw-content-text"]/div/table[1]') %>% 
  html_table(x = ., dec = ',')
```

---

class: bg-main1 split-two

## Resultados

<br>

### `RSelenium`

.center[
```{r tab_rsel, echo = F, eval = T}
readRDS('data/tab_rsel.rds') %>% 
  head(n = 5) %>%
  DT::datatable(style = 'bootstrap', rownames = F,
                options = list(pageLength = 5, dom = 't', ordering = F))
```
]  

<br>

### `rvest`

.center[
```{r tab_rvest, echo = F, eval = T}
readRDS('data/tab_rvest.rds') %>% 
  head(n = 5) %>% 
  DT::datatable(style = 'bootstrap', rownames = F,
                options = list(pageLength = 5, dom = 't', ordering = F))
```
]

---

class: bg-main2 split-30 hide-slide-number center middle

`r icon::fa_server(size = 3)`
# Web Service

---

class: bg-main2

## Portal da Transparência do Governo Federal

--

- http://www.portaltransparencia.gov.br/download-de-dados/orcamento-despesa/2017
- http://www.portaltransparencia.gov.br/download-de-dados/orcamento-despesa/2018
--
<br>
- http://www.portaltransparencia.gov.br/download-de-dados/receitas/2018
- http://www.portaltransparencia.gov.br/download-de-dados/receitas/2014
--
<br>
- http://www.portaltransparencia.gov.br/download-de-dados/cpgf/201801
- http://www.portaltransparencia.gov.br/download-de-dados/cpgf/201802
--
<br>
- http://www.portaltransparencia.gov.br/download-de-dados/cpcc/201702
- http://www.portaltransparencia.gov.br/download-de-dados/cpcc/201502

---

class: bg-main2

## Portal da Transparência do Governo Federal

### Dados do Orçamento

```{r}
download_orcamento <- function(year = NULL, ...) {
  temp_dir <- tempdir()
  link <- ('http://www.portaltransparencia.gov.br/download-de-dados/orcamento-despesa/%d')
  
  lapply(list.files(path = temp_dir, pattern = '.csv$', full.names = T),
         file.remove) %>% invisible()
  
  for(i in year) {
    file_name <- paste0(sprintf('orcamento_%d', i), '.zip')
    dest <- file.path( temp_dir, file_name)
    file.create(dest)
    utils::download.file(url = sprintf(link, i), 
                         destfile = dest, quiet = T, mode = 'wb')
    utils::unzip(zipfile = dest, exdir = temp_dir, 
                 unzip = 'internal')
  }
    
    out <- lapply(list.files(path = temp_dir, pattern = '.csv$', full.names = T),
                  function(x) {
                    aux <- suppressWarnings(data.table::fread(x, dec = ',', sep = ';',
                                                              encoding = 'Latin-1', 
                                                              stringsAsFactors = F))
                    names(aux) <- trimws(iconv(names(aux), from = 'LATIN1', to = 'ASCII//TRANSLIT'), 'b')
                    char_fct <- which(sapply(aux, is.character))
                    aux[, c(char_fct) := lapply(.SD, function(x) {
                      iconv(x, from = 'LATIN1', to = 'ASCII//TRANSLIT')
                    }), .SDcols = char_fct]
                    aux
                  }) %>% data.table::rbindlist()
    
    unlink(list.files(temp_dir, full.names = T), recursive = T)
    
    return(out)
  }
```
  
---

class: bg-main2

## Pacote para baixar dados do Portal

<br>
<br>
<br>
<br>

.middle[
- `r icon::fa_box()` `transpbrr`
- `r icon::fa_github()` https://github.com/stats4good/transpbrr 
- `r icon::fa_globe()` https://stats4good.github.io/transpbrr
]

---

class: bg-main3 split-30 hide-slide-number center middle

`r icon::fa_database(size = 3)`
# API

---

class: split-two

.column.bg-main1[
.split-two[
.row.bg-main1[.content.vmiddle.center[
## Twitter `r icon::fa_twitter()`
]]
.row.bg-main2[.content.vmiddle.center[
## Google `r icon::fa_google()`
]]
]]


.column.bg-black.indigo[.content.vmiddle[
]]

---


class: split-two gray-row2-col1
count: false

.column.bg-main1[
.split-two[
.row.bg-main1[.content.vmiddle.center[
## Twitter `r icon::fa_twitter()`
]]
.row.bg-main2[.content.vmiddle.center[
## Google `r icon::fa_google()`
]]
]]


.column.bg-black.indigo[.content.vmiddle[
]]

---

class: middle center inverse
  
# Adeus